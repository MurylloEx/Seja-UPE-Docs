
@startuml

actor "Usuário"
control "AuthController"
participant "AuthService"
participant "OAuth2Service"
entity "Repository<AuthorizationModel>"
participant "OAuth2Client"
participant "MailerService"
participant "JwtService"

"Usuário" -> "AuthController":1.Solicita Token de Autorização a partir do ID Token
"AuthController" -> "AuthService":1.1.Encapsula e autoriza o ID Token em um Bearer Token : authorizeGoogleToken
"AuthService" -> "OAuth2Service":1.1.1.Verifica se o ID Token é válido e obtém a carga útil do usuário Google : verifyIdToken
"OAuth2Service" -> "OAuth2Client":1.1.1.1.Verifica e consulta o ID Token nos servidores Google : verifyIdToken
"OAuth2Client" -->> "OAuth2Service":reply.Retorna um Ticket de autorização contendo dados do usuário : Promise<LoginTicket>
"OAuth2Service" -->> "AuthService":reply.Retorna os dados do usuário Google ou falso em caso de erro : Promise<false | TokenPayload>
"AuthService" -> "AuthService":1.1.2.Verifica se já houve uma autorização anterior : getPreviousAuthorization
"AuthService" -> "Repository<AuthorizationModel>":1.1.2.1.Contabiliza quantas autorizações de token já foram realizadas para um certo e-mail : count
"Repository<AuthorizationModel>" -->> "AuthService":reply.Retorna o número de autorizações já realizadas para um certo e-mail : number
"AuthService" -> "Repository<AuthorizationModel>":1.1.2.2.Cria uma nova instância de autorização de acesso para um determinado e-mail : create
"Repository<AuthorizationModel>" -->> "AuthService":reply.Retorna uma referência para um objeto de autorização de acesso semipreenchida : Partial<AuthorizationModel>
"AuthService" -> "Repository<AuthorizationModel>":1.1.2.3.Salva a instância de autorização de acesso para um determinado e-mail : save
"Repository<AuthorizationModel>" -->> "AuthService":reply.Retorna uma referência do objeto salvo na base de dados : AuthorizationModel
"AuthService" -->> "AuthService":reply.Retorna um booleano indicando se houve ou não um acesso anterior : boolean
"AuthService" -> "MailerService":1.1.3.Envia um e-mail de boas-vindas para o usuário recém chegado ao aplicativo : sendWelcomeMail
"MailerService" -->> "AuthService":reply.Retorna um booleano indicando se o e-mail foi enviado ou se houve um erro ao enviar o e-mail : Promise<boolean>
"AuthService" -> "AuthService":1.1.4.Constrói o Bearer Token utilizando o JWT Service : buildToken
"AuthService" -> "JwtService":1.1.4.1.Cria e assina o Bearer Token utilizando a chave simétrica do Seja UPE : signAsync
"JwtService" -->> "AuthService":reply.Retorna o Bearer Token assinado com uma chave simétrica : Promise<string>
"AuthService" -->> "AuthService":reply.Retorna o Bearer Token assinado : Promise<string>
"AuthService" -->> "AuthController":reply.Retorna o Bearer Token assinado com uma chave simétrica : Promise<string>
"AuthController" -->> "Usuário":reply.Retorna o Bearer Token encapsulado em um objeto contendo os dados do usuário : any
@enduml
