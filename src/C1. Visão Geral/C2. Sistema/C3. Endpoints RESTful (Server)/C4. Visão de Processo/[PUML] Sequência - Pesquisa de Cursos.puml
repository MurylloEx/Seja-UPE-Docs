@startuml

actor "Usuário"
boundary "Suggestions"
boundary "SearchResults"
boundary "CourseConcurrency"

"Usuário" -> "Suggestions":1.Acessa a tela de sugestões na Tab "Já sei o que quero"
"Suggestions" -> "Suggestions":1.1.Obtém as informações de Campus, cursos e professores salvas em cache : useCampusData
"Suggestions" -->> "Suggestions":reply.Carrega todas as informações do Campus contendo os Cursos : Optional<CampusWithCourseResponse>[]
"Suggestions" -->> "Usuário":reply.A tela é modificada para o usuário pesquisar cursos
"Usuário" -> "Suggestions":2.Informa margem de notas de corte : setNoteRange
"Usuário" -> "Suggestions":3.Informa o campus preferencial : setCampusSelected
"Usuário" -> "Suggestions":4.Informa o curso preferencial : setCourseSelected
"Usuário" -> "Suggestions":5.Clica no botão "Pesquisar" : onSearchClick
"Suggestions" -> "Suggestions":5.1.Filtra os cursos pelo Campus preferencial escolhido pelo usuário : filter
"Suggestions" -->> "Suggestions":reply.Retorna os cursos com o filtro aplicado : CampusCourse[]
"Suggestions" -> "Suggestions":5.2.Filtra os cursos pelo Curso preferencial escolhido pelo usuário : filter
"Suggestions" -->> "Suggestions":reply.Retorna os cursos com o filtro aplicado : CampusCourse[]
"Suggestions" -> "Suggestions":5.3.Filtra os cursos pelo limite de notas definido pelo usuário no MultiSlider : filter
"Suggestions" -->> "Suggestions":reply.Retorna os cursos com o filtro aplicado : CampusCourse[]
"Suggestions" -> "Suggestions":5.4.Navega para a tela de resultados de pesquisas de cursos : navigate
"Suggestions" ->> "SearchResults":5.4.1.Tela é carregada de forma assíncrona : componentDidMount
"SearchResults" -> "SearchResults":5.4.1.1.Obtém a referência da rota atual para ler os parâmetros : useRoute
"SearchResults" -->> "SearchResults":reply.Retorna a rota atual : RouteProp<RoutesParamList, "SearchResults">
"SearchResults" -> "SearchResults":5.4.1.2.Obtém a referência de navegação para navegar a outras telas : useNavigation
"SearchResults" -->> "SearchResults":reply.Retorna o objeto de navegação : CourseNavigationProp
"SearchResults" -> "SearchResults":5.4.1.3.Carrega as cores do tema sendo utilizado atualmente : useTheme
"SearchResults" -->> "SearchResults":reply.Retorna o tema usado atualmente e seu respectivo Setter : [ThemeValue, (v: ThemeValue) => void]
"SearchResults" -> "SearchResults":5.4.1.4.Registra um evento que dispara sempre que a tela é acessada : useEnterScreen
"SearchResults" -> "SearchResults":5.4.1.5.Percorre e exibe todos os cursos recebidos como parâmetros no useRoute : map
"SearchResults" -->> "SearchResults":reply.Retorna os botões de cursos a serem renderizados : JSX.Element[]
"Usuário" -> "SearchResults":6.Clica em um dos cursos exibidos na tela : onCourseClick
"SearchResults" -> "SearchResults":6.1.Navega para a tela de informações de concorrência do curso : navigate
"SearchResults" ->> "CourseConcurrency":6.1.1.Tela é carregada de forma assíncrona : componentDidMount
"CourseConcurrency" -> "CourseConcurrency":6.1.1.1.Obtém a referência da rota atual para ler os parâmetros : useRoute
"CourseConcurrency" -> "CourseConcurrency":6.1.1.2.Define as notas do curso na modalidade SSA : setSsaGrade
"CourseConcurrency" -> "CourseConcurrency":6.1.1.3.Define as notas do curso na modalidade SISU : setSisuGrade

@enduml
